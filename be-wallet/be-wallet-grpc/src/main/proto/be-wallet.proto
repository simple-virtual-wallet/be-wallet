// 使用该proto文件可以定义交互的服务接口，基于该文件编译成的源文件可以分别复制到 client端和server端，便于两者使用

syntax = "proto3"; // 定义语法类型，通常proto3好于proto2，proto2好于proto1，如果不指定，默认使用proto2，必须位于第一行

package wallet; // 定义作用域
option java_multiple_files = false; // 表示下面的message不需要编译成多个java文件
option java_outer_classname = "WalletGrpc"; // 表示下面的message编译成的java类文件的名字
option java_package = "team.simpleVirtualWallet.beWallet.beWalletService.service.grpc"; //指定该proto文件编译成的java源文件的包名


message Pagination {
  int32 page = 1;
  int32 pageSize = 2;
}

message PaginationInfo {
  int32 currentPage = 1;
  int32 nextPage = 2 ;
  int32 previousPage = 3;
  int32 pageSize = 4;
  int32 totalPages = 5;
  int32 totalRows = 6;
}


enum Action {
  Action_NONE = 0;
  Action_DEPOSIT = 1;     // 入金
  Action_WITHDRAW = 2;    // 出金
  Action_BONUS = 3;       // 贈送
  Action_INTEREST = 4;    // 利息
  Action_OPEN = 5;        // 開倉
  Action_CLOSE = 6;       // 平倉
  Action_MANUALLY = 7;    // 人工更改
}

enum Status {
  Status_NONE = 0;
  Status_PENDING = 1;     // 待辦
  Status_SUCCESS = 2;     // 成功
  Status_FAILED = 3;      // 失敗
  Status_ROLLBACK = 4;    // 回滾
}

message CreateWalletReq {
  uint64 userID = 1;
  string currency = 2;
}

message CreateWalletRes {
  uint64 walletID = 1;
}

message GetWalletsReq {
  oneof wallet {
    uint64 id = 1;
    uint64 userID = 2;
  }
  optional string currency = 3;
}

message Wallet{
  uint64 id = 1;
  uint64 userID = 2;
  string amount = 3;
  string currency = 4;
  int64 createdAt = 5;
  int64 updatedAt = 6;
}

message GetWalletsRes {
  repeated Wallet wallets = 1;
}

message DeleteWalletReq {
  uint64 id = 1;
}

message DeleteWalletRes {}

message TransactionReq {
  uint64 walletID = 1;
  Action action = 2;
  string amount = 3;
  string currency = 4;
  uint64 committerID = 5;
  optional string remark = 6;
  optional string beforeAmount = 7;
}

message TransactionRes {
  uint64 id = 1;
  string beforeAmount = 2;
  string afterAmount = 3;
  string currency = 4;
  Status status = 5;
  int64 createdAt = 6;
  int64 updatedAt = 7;
}

message RollbackTransactionReq {
  uint64 id = 1;
  uint64 rollbackerID = 2;
  optional string remark = 3;
}

message RollbackTransactionRes {}

message GetTransactionRecordReq {
  uint64 id = 1;
}

message TransactionRecord {
  uint64 id = 1;
  uint64 userID = 2;
  uint64 walletID = 3;
  Action action = 4;
  string amount = 5;
  optional string beforeAmount = 6;
  optional string afterAmount = 7;
  string currency = 8;
  uint64 committerID = 9;
  Status status = 10;
  optional string remark = 11;
  int64 createdAt = 12;
  int64 updatedAt = 13;
  optional string rollbackBeforeAmount = 14;
  optional string rollbackAfterAmount = 15;
  optional uint64 rollbackerID = 16;
}

message GetTransactionRecordRes {
  TransactionRecord record = 1;
}

message GetTransactionRecordsReq {
  optional uint64 userID = 1;
  optional uint64 committerID = 2;
  optional uint64 rollbackerID = 3;
  repeated string currency = 4;
  repeated Status status = 5;
  repeated Action action = 6;
  optional int64 createdFrom = 7;
  optional int64 createdTo = 8;
  enum OrderBy {
    OrderBy_None = 0;
    OrderBy_MemberID = 1;
    OrderBy_CommitterID = 2;
    OrderBy_Currency = 3;
    OrderBy_CreatedAt = 4;
  }
  enum OrderDirection {
    OrderDirection_None = 0;
    OrderDirection_ASC = 1;
    OrderDirection_DESC = -1;
  }
  message Order {
    OrderBy orderBy = 1;
    OrderDirection orderDirection = 2;
  }
  repeated Order order = 9;
  Pagination pagination = 10;
}

message GetTransactionRecordsRes {
  repeated TransactionRecord records = 1;
  PaginationInfo paginationInfo = 2;
}

service WalletService {
  rpc CreateWallet(CreateWalletReq) returns (CreateWalletRes) {};
  rpc GetWallets(GetWalletsReq) returns (GetWalletsRes) {};
  rpc DeleteWallet(DeleteWalletReq) returns (DeleteWalletRes) {};

  rpc Transaction(TransactionReq) returns (TransactionRes) {};
  rpc RollbackTransaction(RollbackTransactionReq) returns (RollbackTransactionRes) {};

  rpc GetTransactionRecord(GetTransactionRecordReq) returns (GetTransactionRecordRes) {};
  rpc GetTransactionRecords(GetTransactionRecordsReq) returns (GetTransactionRecordsRes) {};
}